// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type EntryType string

const (
	EntryTypeDEBIT  EntryType = "DEBIT"
	EntryTypeCREDIT EntryType = "CREDIT"
)

func (e *EntryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EntryType(s)
	case string:
		*e = EntryType(s)
	default:
		return fmt.Errorf("unsupported scan type for EntryType: %T", src)
	}
	return nil
}

type NullEntryType struct {
	EntryType EntryType `json:"entry_type"`
	Valid     bool      `json:"valid"` // Valid is true if EntryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEntryType) Scan(value interface{}) error {
	if value == nil {
		ns.EntryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EntryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEntryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EntryType), nil
}

type Account struct {
	ID        int32        `json:"id"`
	PublicID  string       `json:"public_id"`
	IsBlocked sql.NullBool `json:"is_blocked"`
	BlockedAt sql.NullTime `json:"blocked_at"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
	UserID    int32        `json:"user_id"`
	Balance   int64        `json:"balance"`
	Currency  string       `json:"currency"`
}

type Entry struct {
	ID        int32        `json:"id"`
	AccountID int32        `json:"account_id"`
	PublicID  string       `json:"public_id"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
	// can be negative or positive
	Amount      int64     `json:"amount"`
	Type        EntryType `json:"type"`
	LastBalance int64     `json:"last_balance"`
}

type Transfer struct {
	ID            int32        `json:"id"`
	FromAccountID int32        `json:"from_account_id"`
	ToAccountID   int32        `json:"to_account_id"`
	PublicID      string       `json:"public_id"`
	CreatedAt     time.Time    `json:"created_at"`
	UpdatedAt     time.Time    `json:"updated_at"`
	DeletedAt     sql.NullTime `json:"deleted_at"`
	// must be positive
	Amount int64 `json:"amount"`
}

type User struct {
	ID                       int32          `json:"id"`
	PublicID                 string         `json:"public_id"`
	IsBlocked                sql.NullBool   `json:"is_blocked"`
	BlockedAt                sql.NullTime   `json:"blocked_at"`
	CreatedAt                time.Time      `json:"created_at"`
	UpdatedAt                time.Time      `json:"updated_at"`
	DeletedAt                sql.NullTime   `json:"deleted_at"`
	Firstname                string         `json:"firstname"`
	Lastname                 string         `json:"lastname"`
	Email                    string         `json:"email"`
	Password                 string         `json:"password"`
	Salt                     string         `json:"salt"`
	SecurityToken            sql.NullString `json:"security_token"`
	EmailConfirmed           sql.NullBool   `json:"email_confirmed"`
	SecurityTokenRequestedAt sql.NullTime   `json:"security_token_requested_at"`
}
