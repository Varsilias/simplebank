// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: entry.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
  public_id, account_id, amount, type, last_balance
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, account_id, public_id, created_at, updated_at, deleted_at, amount, type, last_balance
`

type CreateEntryParams struct {
	PublicID    string    `json:"public_id"`
	AccountID   int32     `json:"account_id"`
	Amount      int64     `json:"amount"`
	Type        EntryType `json:"type"`
	LastBalance int64     `json:"last_balance"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.PublicID,
		arg.AccountID,
		arg.Amount,
		arg.Type,
		arg.LastBalance,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PublicID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Amount,
		&i.Type,
		&i.LastBalance,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, public_id, created_at, updated_at, deleted_at, amount, type, last_balance FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int32) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PublicID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Amount,
		&i.Type,
		&i.LastBalance,
	)
	return i, err
}

const getEntryByAccountId = `-- name: GetEntryByAccountId :one
SELECT id, account_id, public_id, created_at, updated_at, deleted_at, amount, type, last_balance FROM entries
WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetEntryByAccountId(ctx context.Context, accountID int32) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryByAccountId, accountID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PublicID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Amount,
		&i.Type,
		&i.LastBalance,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, public_id, created_at, updated_at, deleted_at, amount, type, last_balance FROM entries
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.PublicID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Amount,
			&i.Type,
			&i.LastBalance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesForAccountId = `-- name: ListEntriesForAccountId :many
SELECT id, account_id, public_id, created_at, updated_at, deleted_at, amount, type, last_balance FROM entries
WHERE account_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListEntriesForAccountIdParams struct {
	AccountID int32 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListEntriesForAccountId(ctx context.Context, arg ListEntriesForAccountIdParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesForAccountId, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.PublicID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Amount,
			&i.Type,
			&i.LastBalance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
