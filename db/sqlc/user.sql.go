// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  public_id, firstname, lastname, email, password, salt
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, public_id, is_blocked, blocked_at, created_at, updated_at, deleted_at, firstname, lastname, email, password, salt, security_token, email_confirmed, security_token_requested_at
`

type CreateUserParams struct {
	PublicID  string `json:"public_id"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Email     string `json:"email"`
	Password  string `json:"password"`
	Salt      string `json:"salt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.PublicID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.Salt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.IsBlocked,
		&i.BlockedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Salt,
		&i.SecurityToken,
		&i.EmailConfirmed,
		&i.SecurityTokenRequestedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, public_id, is_blocked, blocked_at, created_at, updated_at, deleted_at, firstname, lastname, email, password, salt, security_token, email_confirmed, security_token_requested_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.IsBlocked,
		&i.BlockedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Salt,
		&i.SecurityToken,
		&i.EmailConfirmed,
		&i.SecurityTokenRequestedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, public_id, is_blocked, blocked_at, created_at, updated_at, deleted_at, firstname, lastname, email, password, salt, security_token, email_confirmed, security_token_requested_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.IsBlocked,
		&i.BlockedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Salt,
		&i.SecurityToken,
		&i.EmailConfirmed,
		&i.SecurityTokenRequestedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, public_id, is_blocked, blocked_at, created_at, updated_at, deleted_at, firstname, lastname, email, password, salt, security_token, email_confirmed, security_token_requested_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.IsBlocked,
			&i.BlockedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Password,
			&i.Salt,
			&i.SecurityToken,
			&i.EmailConfirmed,
			&i.SecurityTokenRequestedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
